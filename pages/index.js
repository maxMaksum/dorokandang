import Head from 'next/head'
import {useSession, signIn, signOut, getSession} from "next-auth/react"
import React, {useContext, useEffect, useState} from 'react'

import Form from '../components/Form'
import Form3 from '../components/Form3'
import { DataContext } from '../components/contex/myContext'
import { useRouter } from 'next/router'
import Table from '../components/Table'


export default function Home() {

    const router = useRouter()

    const [data, setData] = useState([])
    const [showForm, setShowForm] = useState(true)

    const {dataRe, setDataRe} = useContext(DataContext);

 
    // const fetchData = async () => {
    //     const response = await fetch('/api/customer/customer')
    //     const data = await response.json()
    //     setData(data)
    // }

    // useEffect(() => {
    //     fetchData()
    // }, [])

    console.log(dataRe)
    // useEffect(() => {
    //    console.log(dataRe.products)
    //    setData(dataRe.products)
    // }, [dataRe])


    const {data: session, status} = useSession()
    if (status === "authenticated") {
        return (
            
            <div>
                <Head>
                    <title>Create Next App</title>
                    <meta name="description" content="Generated by create next app"/>
                    <link rel="icon" href="/favicon.ico"/>
                </Head>
                
                    <main>
                        <Form />
                        <div className={dataRe?"block":"hidden"}>
                           <Table customers={dataRe.products} />

                        </div>
                       
                       
                     
                    </main>

            </div>
           
        )
    } else {
        return (
            <div>You are not signIn</div>
        )
    }
}

export const getServerSideProps = async (contex) => {
    const session = await getSession(contex)

    if (! session) {
        return {
            redirect: {
                destination: "/login"
            }
        }
    }
    return {props: {
            session
        }}

}
